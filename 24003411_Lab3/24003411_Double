#include <iostream>
#include <string>
using namespace std;

struct Node {
    string name;
    Node* prev;
    Node* next;
    
    Node(string n) : name(n), prev(nullptr), next(nullptr) {}
};

class DoubleLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoubleLinkedList() : head(nullptr), tail(nullptr) {}

    ~DoubleLinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
    }

    bool isEmpty() {
        return head == nullptr;
    }

    void push(string name) {
        Node* newNode = new Node(name);
        if (isEmpty()) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }

    void pop() {
        if (isEmpty()) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        if (head != nullptr) {
            head->prev = nullptr;
        } else {
            tail = nullptr;
        }
        delete temp;
    }

    Node* search(string name) {
        Node* current = head;
        while (current != nullptr) {
            if (current->name == name) {
                return current;
            }
            current = current->next;
        }
        return nullptr;
    }

    void display() {
        Node* current = head;
        cout << "Names: ";
        while (current != nullptr) {
            cout << current->name;
            if (current->next != nullptr) cout << " <-> ";
            current = current->next;
        }
        cout << " -> NULL" << endl;
    }
};

int main() {
    DoubleLinkedList dll;
    
    dll.push("Adlin");
    dll.push("Aliya");
    dll.push("Fakri");
    dll.push("Anisah");
    dll.pop();
    dll.display();
    
    return 0;
}

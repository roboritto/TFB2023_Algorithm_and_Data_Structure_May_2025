#include <iostream>
#include <vector>
using namespace std;

// Function to print any matrix
void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int val : row) {
            cout << val << "\t";
        }
        cout << endl;
    }
}

// Rotate 90° clockwise (for any MxN matrix)
vector<vector<int>> rotate90Clockwise(const vector<vector<int>>& matrix) {
    if (matrix.empty()) return {};
    
    int m = matrix.size();
    int n = matrix[0].size();
    vector<vector<int>> result(n, vector<int>(m));
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            result[j][m - 1 - i] = matrix[i][j];
        }
    }
    return result;
}

// Rotate 90° counter-clockwise (for any MxN matrix)
vector<vector<int>> rotate90CounterClockwise(const vector<vector<int>>& matrix) {
    if (matrix.empty()) return {};
    
    int m = matrix.size();
    int n = matrix[0].size();
    vector<vector<int>> result(n, vector<int>(m));
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            result[n - 1 - j][i] = matrix[i][j];
        }
    }
    return result;
}

// Rotate 180° (for any MxN matrix)
vector<vector<int>> rotate180(const vector<vector<int>>& matrix) {
    if (matrix.empty()) return {};
    
    int m = matrix.size();
    int n = matrix[0].size();
    vector<vector<int>> result(m, vector<int>(n));
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            result[m - 1 - i][n - 1 - j] = matrix[i][j];
        }
    }
    return result;
}

int main() {
    int rows, cols;
    
    // Get matrix dimensions
    cout << "Enter number of rows: ";
    cin >> rows;
    cout << "Enter number of columns: ";
    cin >> cols;
    
    // Input matrix
    vector<vector<int>> matrix(rows, vector<int>(cols));
    cout << "Enter matrix elements row by row:\n";
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
    
    // Display original matrix
    cout << "\nOriginal Matrix:\n";
    printMatrix(matrix);
    
    // Rotation menu
    int choice;
    cout << "\nRotation Options:\n";
    cout << "1. 90° Clockwise\n";
    cout << "2. 90° Counter-Clockwise\n";
    cout << "3. 180°\n";
    cout << "Enter your choice (1-3): ";
    cin >> choice;
    
    // Perform rotation
    vector<vector<int>> rotated;
    switch (choice) {
        case 1:
            rotated = rotate90Clockwise(matrix);
            cout << "\nMatrix after 90° Clockwise Rotation:\n";
            break;
        case 2:
            rotated = rotate90CounterClockwise(matrix);
            cout << "\nMatrix after 90° Counter-Clockwise Rotation:\n";
            break;
        case 3:
            rotated = rotate180(matrix);
            cout << "\nMatrix after 180° Rotation:\n";
            break;
        default:
            cout << "Invalid choice!";
            return 1;
    }
    
    printMatrix(rotated);
    return 0;
}

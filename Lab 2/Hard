#include <iostream>
#include <vector>
using namespace std;

// Function to check if a Tic-Tac-Toe board is valid
bool isValidTicTacToe(const vector<vector<char>>& board) {
    int countX = 0, countO = 0;
    
    // Count X's and O's
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == 'X') countX++;
            else if (cell == 'O') countO++;
        }
    }
    
    // Rule 1: Number of X's must be equal to or exactly one more than O's
    if (!(countX == countO || countX == countO + 1)) {
        return false;
    }
    
    // Check for winning lines
    bool xWins = false, oWins = false;
    
    // Check rows and columns
    for (int i = 0; i < 3; i++) {
        // Check rows
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
            if (board[i][0] == 'X') xWins = true;
            else if (board[i][0] == 'O') oWins = true;
        }
        // Check columns
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
            if (board[0][i] == 'X') xWins = true;
            else if (board[0][i] == 'O') oWins = true;
        }
    }
    
    // Check diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == 'X') xWins = true;
        else if (board[0][0] == 'O') oWins = true;
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == 'X') xWins = true;
        else if (board[0][2] == 'O') oWins = true;
    }
    
    // Rule 2: Both players can't win simultaneously
    if (xWins && oWins) {
        return false;
    }
    
    // Rule 3: If X wins, X must have one more move than O
    if (xWins && countX != countO + 1) {
        return false;
    }
    
    // Rule 4: If O wins, X and O counts must be equal
    if (oWins && countX != countO) {
        return false;
    }
    
    // If all checks passed
    return true;
}

int main() {
    vector<vector<char>> board(3, vector<char>(3));
    
    cout << "Enter Tic-Tac-Toe board (3x3), use X, O or . for empty:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cin >> board[i][j];
        }
    }
    
    cout << "\nBoard:\n";
    for (const auto& row : board) {
        for (char cell : row) {
            cout << cell << " ";
        }
        cout << endl;
    }
    
    if (isValidTicTacToe(board)) {
        cout << "\nThis is a VALID Tic-Tac-Toe board state.\n";
    } else {
        cout << "\nThis is an INVALID Tic-Tac-Toe board state.\n";
    }
    
    return 0;
}

#include <iostream>
#include <string>
using namespace std;

class Queue {
private:
    string* arr;
    int front;
    int end;
    int size;
    int capacity;
    
public:
    Queue(int initialCapacity = 0) {
      capacity = initialCapacity;
      arr = new string[capacity];
      front = 0;
      end = -1;
      size = 0;
    }
    
    ~Queue() {
      delete[] arr;
    }
    
    void enqueue(const string& name) {
      if (size != capacity) {
        end = (end + 1) % capacity;
        arr[end] = name;
        size++;
      } else {
        cout << "\nFull queue, cannot insert";
      }
    }
    
    string dequeue() {
      string item = arr[front];
        front = (front + 1) % capacity;
        size--;
      
      if (size == 0) {
        cout << "Error, queue empty cannot delete\n";
      }
      
      return item;
    }
    
    void display() {
      int count = 0;
      int index = front;
      
      cout << "\nFull: " << size << "/" << capacity << endl;
      
      while (count < size) {
        cout << "" << count+1 << "."<< arr[index] << "\n";
        index = (index + 1) % capacity;
        count++;
        }
    }
};

int main() {
    int userCapacity;
    cout << "Input queue size: ";
    cin >> userCapacity;
    
    Queue q(userCapacity);
    
    while (true) {
      int choice;
      cout << "\nInput operation: \n1. Enqueue \n2. Dequeue \n3. Display \n4. Exit \nChoice: ";
      cin >> choice;
      
      if (choice == 4)
        break;
      
      switch (choice) {
        case 1: {
          string input;
          cout << "\nInput:";
          cin >> input;
          q.enqueue(input);
          break;
        }
        
        case 2: {
          q.dequeue();
          break;
        }
        
        case 3:
          q.display();
          break;
        
        default:
          cout << "\nInvalid choice" << endl;
      }
    }
    return 0;
}

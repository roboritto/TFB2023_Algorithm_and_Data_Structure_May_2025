#include <iostream>
#include <string>
using namespace std;

// Node structure
struct Node {
    string name;
    Node* prev;
    Node* next;

    // Constructor
    Node(string n) : name(n), prev(nullptr), next(nullptr) {}
};

// Doubly Linked List class
class DoubleLinkedList {
private:
    Node* head;
    Node* tail;

public:
    // Constructor
    DoubleLinkedList() : head(nullptr), tail(nullptr) {}

    // Destructor (to free memory)
    ~DoubleLinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
    }

    // Check if the list is empty
    bool isEmpty() {
        return head == nullptr;
    }

    // Insert at the beginning
    void pushFront(string name) {
        Node* newNode = new Node(name);
        if (isEmpty()) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }

    // Insert at the end
    void pushBack(string name) {
        Node* newNode = new Node(name);
        if (isEmpty()) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    // Delete from the front
    void popFront() {
        if (isEmpty()) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        if (head != nullptr) {
            head->prev = nullptr;
        } else {
            tail = nullptr;
        }
        delete temp;
    }

    // Delete from the end
    void popBack() {
        if (isEmpty()) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = tail;
        tail = tail->prev;
        if (tail != nullptr) {
            tail->next = nullptr;
        } else {
            head = nullptr;
        }
        delete temp;
    }

    // Search for a node by name
    Node* search(string name) {
        Node* current = head;
        while (current != nullptr) {
            if (current->name == name) {
                return current;
            }
            current = current->next;
        }
        return nullptr;
    }

    // Display list forward
    void displayForward() {
        Node* current = head;
        cout << "Names (Forward): ";
        while (current != nullptr) {
            cout << current->name;
            if (current->next != nullptr) cout << " <-> ";
            current = current->next;
        }
        cout << " -> NULL" << endl;
    }
};

int main() {
    DoubleLinkedList dll;

    // Insertion examples
    dll.pushFront("Alice");
    dll.pushBack("Bob");
    dll.pushBack("Charlie");

    // Display the list
    dll.displayForward();  // Alice <-> Bob <-> Charlie -> NULL

    // Deletion examples
    dll.popFront();        // Removes "Alice"
    dll.popBack();         // Removes "Charlie"
    dll.displayForward();  // Bob <-> David -> NULL

    return 0;
}
